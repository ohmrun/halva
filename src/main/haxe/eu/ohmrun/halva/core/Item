package eu.ohmrun.halva.core;

typedef ItemDef<T> = Memo<LVar<T>>;

@:using(eu.ohmrun.halva.core.Memo.MemoLift)
@:using(eu.ohmrun.halva.core.Item.ItemLift)
@:forward abstract Item<T>(ItemDef<T>) from ItemDef<T> to ItemDef<T>{
  static public var _(default,never) = ItemLift;
  public inline function new(self:ItemDef<T>) this = self;
  @:noUsing static inline public function lift<T>(self:ItemDef<T>):Item<T> return new Item(self);

  public function prj():ItemDef<T> return this;
  private var self(get,never):Item<T>;
  private function get_self():Item<T> return lift(this);
}
class ItemLift{
  static public inline function lift<T>(self:ItemDef<T>):Item<T>{
    return Item.lift(self);
  }
} 